/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as SystemSettingsRouteImport } from './routes/system-settings'
import { Route as SubscriptionRouteImport } from './routes/subscription'
import { Route as SubscribeFilesRouteImport } from './routes/subscribe-files'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RulesRouteImport } from './routes/rules'
import { Route as ProbeRouteImport } from './routes/probe'
import { Route as NodesRouteImport } from './routes/nodes'
import { Route as LoginRouteImport } from './routes/login'
import { Route as GeneratorRouteImport } from './routes/generator'
import { Route as CustomRulesRouteImport } from './routes/custom-rules'
import { Route as ChangePasswordRouteImport } from './routes/change-password'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SubscriptionIndexRouteImport } from './routes/subscription.index'
import { Route as SubscribeFilesIndexRouteImport } from './routes/subscribe-files.index'
import { Route as NodesIndexRouteImport } from './routes/nodes.index'
import { Route as CustomRulesIndexRouteImport } from './routes/custom-rules.index'
import { Route as SubscribeFilesCustomRouteImport } from './routes/subscribe-files.custom'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const SystemSettingsRoute = SystemSettingsRouteImport.update({
  id: '/system-settings',
  path: '/system-settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SubscriptionRoute = SubscriptionRouteImport.update({
  id: '/subscription',
  path: '/subscription',
  getParentRoute: () => rootRouteImport,
} as any)
const SubscribeFilesRoute = SubscribeFilesRouteImport.update({
  id: '/subscribe-files',
  path: '/subscribe-files',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RulesRoute = RulesRouteImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => rootRouteImport,
} as any)
const ProbeRoute = ProbeRouteImport.update({
  id: '/probe',
  path: '/probe',
  getParentRoute: () => rootRouteImport,
} as any)
const NodesRoute = NodesRouteImport.update({
  id: '/nodes',
  path: '/nodes',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const GeneratorRoute = GeneratorRouteImport.update({
  id: '/generator',
  path: '/generator',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomRulesRoute = CustomRulesRouteImport.update({
  id: '/custom-rules',
  path: '/custom-rules',
  getParentRoute: () => rootRouteImport,
} as any)
const ChangePasswordRoute = ChangePasswordRouteImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SubscriptionIndexRoute = SubscriptionIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SubscriptionRoute,
} as any)
const SubscribeFilesIndexRoute = SubscribeFilesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SubscribeFilesRoute,
} as any)
const NodesIndexRoute = NodesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NodesRoute,
} as any)
const CustomRulesIndexRoute = CustomRulesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CustomRulesRoute,
} as any)
const SubscribeFilesCustomRoute = SubscribeFilesCustomRouteImport.update({
  id: '/custom',
  path: '/custom',
  getParentRoute: () => SubscribeFilesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/custom-rules': typeof CustomRulesRouteWithChildren
  '/generator': typeof GeneratorRoute
  '/login': typeof LoginRoute
  '/nodes': typeof NodesRouteWithChildren
  '/probe': typeof ProbeRoute
  '/rules': typeof RulesRoute
  '/settings': typeof SettingsRoute
  '/subscribe-files': typeof SubscribeFilesRouteWithChildren
  '/subscription': typeof SubscriptionRouteWithChildren
  '/system-settings': typeof SystemSettingsRoute
  '/users': typeof UsersRoute
  '/subscribe-files/custom': typeof SubscribeFilesCustomRoute
  '/custom-rules/': typeof CustomRulesIndexRoute
  '/nodes/': typeof NodesIndexRoute
  '/subscribe-files/': typeof SubscribeFilesIndexRoute
  '/subscription/': typeof SubscriptionIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/generator': typeof GeneratorRoute
  '/login': typeof LoginRoute
  '/probe': typeof ProbeRoute
  '/rules': typeof RulesRoute
  '/settings': typeof SettingsRoute
  '/system-settings': typeof SystemSettingsRoute
  '/users': typeof UsersRoute
  '/subscribe-files/custom': typeof SubscribeFilesCustomRoute
  '/custom-rules': typeof CustomRulesIndexRoute
  '/nodes': typeof NodesIndexRoute
  '/subscribe-files': typeof SubscribeFilesIndexRoute
  '/subscription': typeof SubscriptionIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/custom-rules': typeof CustomRulesRouteWithChildren
  '/generator': typeof GeneratorRoute
  '/login': typeof LoginRoute
  '/nodes': typeof NodesRouteWithChildren
  '/probe': typeof ProbeRoute
  '/rules': typeof RulesRoute
  '/settings': typeof SettingsRoute
  '/subscribe-files': typeof SubscribeFilesRouteWithChildren
  '/subscription': typeof SubscriptionRouteWithChildren
  '/system-settings': typeof SystemSettingsRoute
  '/users': typeof UsersRoute
  '/subscribe-files/custom': typeof SubscribeFilesCustomRoute
  '/custom-rules/': typeof CustomRulesIndexRoute
  '/nodes/': typeof NodesIndexRoute
  '/subscribe-files/': typeof SubscribeFilesIndexRoute
  '/subscription/': typeof SubscriptionIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/change-password'
    | '/custom-rules'
    | '/generator'
    | '/login'
    | '/nodes'
    | '/probe'
    | '/rules'
    | '/settings'
    | '/subscribe-files'
    | '/subscription'
    | '/system-settings'
    | '/users'
    | '/subscribe-files/custom'
    | '/custom-rules/'
    | '/nodes/'
    | '/subscribe-files/'
    | '/subscription/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/change-password'
    | '/generator'
    | '/login'
    | '/probe'
    | '/rules'
    | '/settings'
    | '/system-settings'
    | '/users'
    | '/subscribe-files/custom'
    | '/custom-rules'
    | '/nodes'
    | '/subscribe-files'
    | '/subscription'
  id:
    | '__root__'
    | '/'
    | '/change-password'
    | '/custom-rules'
    | '/generator'
    | '/login'
    | '/nodes'
    | '/probe'
    | '/rules'
    | '/settings'
    | '/subscribe-files'
    | '/subscription'
    | '/system-settings'
    | '/users'
    | '/subscribe-files/custom'
    | '/custom-rules/'
    | '/nodes/'
    | '/subscribe-files/'
    | '/subscription/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChangePasswordRoute: typeof ChangePasswordRoute
  CustomRulesRoute: typeof CustomRulesRouteWithChildren
  GeneratorRoute: typeof GeneratorRoute
  LoginRoute: typeof LoginRoute
  NodesRoute: typeof NodesRouteWithChildren
  ProbeRoute: typeof ProbeRoute
  RulesRoute: typeof RulesRoute
  SettingsRoute: typeof SettingsRoute
  SubscribeFilesRoute: typeof SubscribeFilesRouteWithChildren
  SubscriptionRoute: typeof SubscriptionRouteWithChildren
  SystemSettingsRoute: typeof SystemSettingsRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/system-settings': {
      id: '/system-settings'
      path: '/system-settings'
      fullPath: '/system-settings'
      preLoaderRoute: typeof SystemSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/subscription': {
      id: '/subscription'
      path: '/subscription'
      fullPath: '/subscription'
      preLoaderRoute: typeof SubscriptionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/subscribe-files': {
      id: '/subscribe-files'
      path: '/subscribe-files'
      fullPath: '/subscribe-files'
      preLoaderRoute: typeof SubscribeFilesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rules': {
      id: '/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof RulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/probe': {
      id: '/probe'
      path: '/probe'
      fullPath: '/probe'
      preLoaderRoute: typeof ProbeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/nodes': {
      id: '/nodes'
      path: '/nodes'
      fullPath: '/nodes'
      preLoaderRoute: typeof NodesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/generator': {
      id: '/generator'
      path: '/generator'
      fullPath: '/generator'
      preLoaderRoute: typeof GeneratorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/custom-rules': {
      id: '/custom-rules'
      path: '/custom-rules'
      fullPath: '/custom-rules'
      preLoaderRoute: typeof CustomRulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/change-password': {
      id: '/change-password'
      path: '/change-password'
      fullPath: '/change-password'
      preLoaderRoute: typeof ChangePasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/subscription/': {
      id: '/subscription/'
      path: '/'
      fullPath: '/subscription/'
      preLoaderRoute: typeof SubscriptionIndexRouteImport
      parentRoute: typeof SubscriptionRoute
    }
    '/subscribe-files/': {
      id: '/subscribe-files/'
      path: '/'
      fullPath: '/subscribe-files/'
      preLoaderRoute: typeof SubscribeFilesIndexRouteImport
      parentRoute: typeof SubscribeFilesRoute
    }
    '/nodes/': {
      id: '/nodes/'
      path: '/'
      fullPath: '/nodes/'
      preLoaderRoute: typeof NodesIndexRouteImport
      parentRoute: typeof NodesRoute
    }
    '/custom-rules/': {
      id: '/custom-rules/'
      path: '/'
      fullPath: '/custom-rules/'
      preLoaderRoute: typeof CustomRulesIndexRouteImport
      parentRoute: typeof CustomRulesRoute
    }
    '/subscribe-files/custom': {
      id: '/subscribe-files/custom'
      path: '/custom'
      fullPath: '/subscribe-files/custom'
      preLoaderRoute: typeof SubscribeFilesCustomRouteImport
      parentRoute: typeof SubscribeFilesRoute
    }
  }
}

interface CustomRulesRouteChildren {
  CustomRulesIndexRoute: typeof CustomRulesIndexRoute
}

const CustomRulesRouteChildren: CustomRulesRouteChildren = {
  CustomRulesIndexRoute: CustomRulesIndexRoute,
}

const CustomRulesRouteWithChildren = CustomRulesRoute._addFileChildren(
  CustomRulesRouteChildren,
)

interface NodesRouteChildren {
  NodesIndexRoute: typeof NodesIndexRoute
}

const NodesRouteChildren: NodesRouteChildren = {
  NodesIndexRoute: NodesIndexRoute,
}

const NodesRouteWithChildren = NodesRoute._addFileChildren(NodesRouteChildren)

interface SubscribeFilesRouteChildren {
  SubscribeFilesCustomRoute: typeof SubscribeFilesCustomRoute
  SubscribeFilesIndexRoute: typeof SubscribeFilesIndexRoute
}

const SubscribeFilesRouteChildren: SubscribeFilesRouteChildren = {
  SubscribeFilesCustomRoute: SubscribeFilesCustomRoute,
  SubscribeFilesIndexRoute: SubscribeFilesIndexRoute,
}

const SubscribeFilesRouteWithChildren = SubscribeFilesRoute._addFileChildren(
  SubscribeFilesRouteChildren,
)

interface SubscriptionRouteChildren {
  SubscriptionIndexRoute: typeof SubscriptionIndexRoute
}

const SubscriptionRouteChildren: SubscriptionRouteChildren = {
  SubscriptionIndexRoute: SubscriptionIndexRoute,
}

const SubscriptionRouteWithChildren = SubscriptionRoute._addFileChildren(
  SubscriptionRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChangePasswordRoute: ChangePasswordRoute,
  CustomRulesRoute: CustomRulesRouteWithChildren,
  GeneratorRoute: GeneratorRoute,
  LoginRoute: LoginRoute,
  NodesRoute: NodesRouteWithChildren,
  ProbeRoute: ProbeRoute,
  RulesRoute: RulesRoute,
  SettingsRoute: SettingsRoute,
  SubscribeFilesRoute: SubscribeFilesRouteWithChildren,
  SubscriptionRoute: SubscriptionRouteWithChildren,
  SystemSettingsRoute: SystemSettingsRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
