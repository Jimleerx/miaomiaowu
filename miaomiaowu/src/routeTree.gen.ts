/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as SubscriptionRouteImport } from './routes/subscription'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RulesRouteImport } from './routes/rules'
import { Route as ProbeRouteImport } from './routes/probe'
import { Route as ChangePasswordRouteImport } from './routes/change-password'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SubscriptionIndexRouteImport } from './routes/subscription.index'
import { Route as SubscriptionManageRouteImport } from './routes/subscription.manage'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const SubscriptionRoute = SubscriptionRouteImport.update({
  id: '/subscription',
  path: '/subscription',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RulesRoute = RulesRouteImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => rootRouteImport,
} as any)
const ProbeRoute = ProbeRouteImport.update({
  id: '/probe',
  path: '/probe',
  getParentRoute: () => rootRouteImport,
} as any)
const ChangePasswordRoute = ChangePasswordRouteImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SubscriptionIndexRoute = SubscriptionIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SubscriptionRoute,
} as any)
const SubscriptionManageRoute = SubscriptionManageRouteImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => SubscriptionRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/probe': typeof ProbeRoute
  '/rules': typeof RulesRoute
  '/settings': typeof SettingsRoute
  '/subscription': typeof SubscriptionRouteWithChildren
  '/users': typeof UsersRoute
  '/subscription/manage': typeof SubscriptionManageRoute
  '/subscription/': typeof SubscriptionIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/probe': typeof ProbeRoute
  '/rules': typeof RulesRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/subscription/manage': typeof SubscriptionManageRoute
  '/subscription': typeof SubscriptionIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/probe': typeof ProbeRoute
  '/rules': typeof RulesRoute
  '/settings': typeof SettingsRoute
  '/subscription': typeof SubscriptionRouteWithChildren
  '/users': typeof UsersRoute
  '/subscription/manage': typeof SubscriptionManageRoute
  '/subscription/': typeof SubscriptionIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/change-password'
    | '/probe'
    | '/rules'
    | '/settings'
    | '/subscription'
    | '/users'
    | '/subscription/manage'
    | '/subscription/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/change-password'
    | '/probe'
    | '/rules'
    | '/settings'
    | '/users'
    | '/subscription/manage'
    | '/subscription'
  id:
    | '__root__'
    | '/'
    | '/change-password'
    | '/probe'
    | '/rules'
    | '/settings'
    | '/subscription'
    | '/users'
    | '/subscription/manage'
    | '/subscription/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChangePasswordRoute: typeof ChangePasswordRoute
  ProbeRoute: typeof ProbeRoute
  RulesRoute: typeof RulesRoute
  SettingsRoute: typeof SettingsRoute
  SubscriptionRoute: typeof SubscriptionRouteWithChildren
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/subscription': {
      id: '/subscription'
      path: '/subscription'
      fullPath: '/subscription'
      preLoaderRoute: typeof SubscriptionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rules': {
      id: '/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof RulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/probe': {
      id: '/probe'
      path: '/probe'
      fullPath: '/probe'
      preLoaderRoute: typeof ProbeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/change-password': {
      id: '/change-password'
      path: '/change-password'
      fullPath: '/change-password'
      preLoaderRoute: typeof ChangePasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/subscription/': {
      id: '/subscription/'
      path: '/'
      fullPath: '/subscription/'
      preLoaderRoute: typeof SubscriptionIndexRouteImport
      parentRoute: typeof SubscriptionRoute
    }
    '/subscription/manage': {
      id: '/subscription/manage'
      path: '/manage'
      fullPath: '/subscription/manage'
      preLoaderRoute: typeof SubscriptionManageRouteImport
      parentRoute: typeof SubscriptionRoute
    }
  }
}

interface SubscriptionRouteChildren {
  SubscriptionManageRoute: typeof SubscriptionManageRoute
  SubscriptionIndexRoute: typeof SubscriptionIndexRoute
}

const SubscriptionRouteChildren: SubscriptionRouteChildren = {
  SubscriptionManageRoute: SubscriptionManageRoute,
  SubscriptionIndexRoute: SubscriptionIndexRoute,
}

const SubscriptionRouteWithChildren = SubscriptionRoute._addFileChildren(
  SubscriptionRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChangePasswordRoute: ChangePasswordRoute,
  ProbeRoute: ProbeRoute,
  RulesRoute: RulesRoute,
  SettingsRoute: SettingsRoute,
  SubscriptionRoute: SubscriptionRouteWithChildren,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
